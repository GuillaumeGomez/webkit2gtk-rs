// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use WebView;
use gio;
#[cfg(any(feature = "v2_2", feature = "dox"))]
use glib;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use webkit2_sys;

glib_wrapper! {
    pub struct URISchemeRequest(Object<webkit2_sys::WebKitURISchemeRequest, webkit2_sys::WebKitURISchemeRequestClass, URISchemeRequestClass>);

    match fn {
        get_type => || webkit2_sys::webkit_uri_scheme_request_get_type(),
    }
}

pub const NONE_URI_SCHEME_REQUEST: Option<&URISchemeRequest> = None;

pub trait URISchemeRequestExt: 'static {
    fn finish<P: IsA<gio::InputStream>>(&self, stream: &P, stream_length: i64, mime_type: Option<&str>);

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn finish_error(&self, error: &mut glib::Error);

    fn get_path(&self) -> Option<GString>;

    fn get_scheme(&self) -> Option<GString>;

    fn get_uri(&self) -> Option<GString>;

    fn get_web_view(&self) -> Option<WebView>;
}

impl<O: IsA<URISchemeRequest>> URISchemeRequestExt for O {
    fn finish<P: IsA<gio::InputStream>>(&self, stream: &P, stream_length: i64, mime_type: Option<&str>) {
        unsafe {
            webkit2_sys::webkit_uri_scheme_request_finish(self.as_ref().to_glib_none().0, stream.as_ref().to_glib_none().0, stream_length, mime_type.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn finish_error(&self, error: &mut glib::Error) {
        unsafe {
            webkit2_sys::webkit_uri_scheme_request_finish_error(self.as_ref().to_glib_none().0, error.to_glib_none_mut().0);
        }
    }

    fn get_path(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_uri_scheme_request_get_path(self.as_ref().to_glib_none().0))
        }
    }

    fn get_scheme(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_uri_scheme_request_get_scheme(self.as_ref().to_glib_none().0))
        }
    }

    fn get_uri(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_uri_scheme_request_get_uri(self.as_ref().to_glib_none().0))
        }
    }

    fn get_web_view(&self) -> Option<WebView> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_uri_scheme_request_get_web_view(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for URISchemeRequest {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "URISchemeRequest")
    }
}
