// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

#[cfg(feature = "v2_2")]
use Error;
use WebView;
use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct URISchemeRequest(Object<ffi::WebKitURISchemeRequest>);

    match fn {
        get_type => || ffi::webkit_uri_scheme_request_get_type(),
    }
}

impl URISchemeRequest {
    //pub fn finish<'a, P: IsA</*Ignored*/gio::InputStream>, Q: Into<Option<&'a str>>>(&self, stream: &P, stream_length: i64, mime_type: Q) {
    //    unsafe { TODO: call ffi::webkit_uri_scheme_request_finish() }
    //}

    #[cfg(feature = "v2_2")]
    pub fn finish_error(&self, error: &mut Error) {
        unsafe {
            ffi::webkit_uri_scheme_request_finish_error(self.to_glib_none().0, error.to_glib_none_mut().0);
        }
    }

    pub fn get_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_uri_scheme_request_get_path(self.to_glib_none().0))
        }
    }

    pub fn get_scheme(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_uri_scheme_request_get_scheme(self.to_glib_none().0))
        }
    }

    pub fn get_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_uri_scheme_request_get_uri(self.to_glib_none().0))
        }
    }

    pub fn get_web_view(&self) -> Option<WebView> {
        unsafe {
            from_glib_none(ffi::webkit_uri_scheme_request_get_web_view(self.to_glib_none().0))
        }
    }
}
