// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2_16", feature = "dox"))]
use HardwareAccelerationPolicy;
use glib::GString;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use webkit2_sys;

glib_wrapper! {
    pub struct Settings(Object<webkit2_sys::WebKitSettings, webkit2_sys::WebKitSettingsClass, SettingsClass>);

    match fn {
        get_type => || webkit2_sys::webkit_settings_get_type(),
    }
}

impl Settings {
    pub fn new() -> Settings {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(webkit2_sys::webkit_settings_new())
        }
    }

    //pub fn new_with_settings(first_setting_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Settings {
    //    unsafe { TODO: call webkit2_sys:webkit_settings_new_with_settings() }
    //}

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    pub fn font_size_to_pixels(points: u32) -> u32 {
        assert_initialized_main_thread!();
        unsafe {
            webkit2_sys::webkit_settings_font_size_to_pixels(points)
        }
    }

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    pub fn font_size_to_points(pixels: u32) -> u32 {
        assert_initialized_main_thread!();
        unsafe {
            webkit2_sys::webkit_settings_font_size_to_points(pixels)
        }
    }
}

impl Default for Settings {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SETTINGS: Option<&Settings> = None;

pub trait SettingsExt: 'static {
    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_allow_file_access_from_file_urls(&self) -> bool;

    fn get_allow_modal_dialogs(&self) -> bool;

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_allow_universal_access_from_file_urls(&self) -> bool;

    fn get_auto_load_images(&self) -> bool;

    fn get_cursive_font_family(&self) -> Option<GString>;

    fn get_default_charset(&self) -> Option<GString>;

    fn get_default_font_family(&self) -> Option<GString>;

    fn get_default_font_size(&self) -> u32;

    fn get_default_monospace_font_size(&self) -> u32;

    fn get_draw_compositing_indicators(&self) -> bool;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn get_enable_accelerated_2d_canvas(&self) -> bool;

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn get_enable_back_forward_navigation_gestures(&self) -> bool;

    fn get_enable_caret_browsing(&self) -> bool;

    fn get_enable_developer_extras(&self) -> bool;

    fn get_enable_dns_prefetching(&self) -> bool;

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn get_enable_encrypted_media(&self) -> bool;

    fn get_enable_frame_flattening(&self) -> bool;

    fn get_enable_fullscreen(&self) -> bool;

    fn get_enable_html5_database(&self) -> bool;

    fn get_enable_html5_local_storage(&self) -> bool;

    fn get_enable_hyperlink_auditing(&self) -> bool;

    fn get_enable_java(&self) -> bool;

    fn get_enable_javascript(&self) -> bool;

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn get_enable_javascript_markup(&self) -> bool;

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn get_enable_media(&self) -> bool;

    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn get_enable_media_capabilities(&self) -> bool;

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn get_enable_media_stream(&self) -> bool;

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn get_enable_mediasource(&self) -> bool;

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn get_enable_mock_capture_devices(&self) -> bool;

    fn get_enable_offline_web_application_cache(&self) -> bool;

    fn get_enable_page_cache(&self) -> bool;

    fn get_enable_plugins(&self) -> bool;

    #[cfg_attr(feature = "v2_16", deprecated)]
    fn get_enable_private_browsing(&self) -> bool;

    fn get_enable_resizable_text_areas(&self) -> bool;

    fn get_enable_site_specific_quirks(&self) -> bool;

    fn get_enable_smooth_scrolling(&self) -> bool;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn get_enable_spatial_navigation(&self) -> bool;

    fn get_enable_tabs_to_links(&self) -> bool;

    fn get_enable_webaudio(&self) -> bool;

    fn get_enable_webgl(&self) -> bool;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn get_enable_write_console_messages_to_stdout(&self) -> bool;

    fn get_enable_xss_auditor(&self) -> bool;

    fn get_fantasy_font_family(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_hardware_acceleration_policy(&self) -> HardwareAccelerationPolicy;

    fn get_javascript_can_access_clipboard(&self) -> bool;

    fn get_javascript_can_open_windows_automatically(&self) -> bool;

    fn get_load_icons_ignoring_image_load_setting(&self) -> bool;

    fn get_media_playback_allows_inline(&self) -> bool;

    fn get_media_playback_requires_user_gesture(&self) -> bool;

    fn get_minimum_font_size(&self) -> u32;

    fn get_monospace_font_family(&self) -> Option<GString>;

    fn get_pictograph_font_family(&self) -> Option<GString>;

    fn get_print_backgrounds(&self) -> bool;

    fn get_sans_serif_font_family(&self) -> Option<GString>;

    fn get_serif_font_family(&self) -> Option<GString>;

    fn get_user_agent(&self) -> Option<GString>;

    fn get_zoom_text_only(&self) -> bool;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn set_allow_file_access_from_file_urls(&self, allowed: bool);

    fn set_allow_modal_dialogs(&self, allowed: bool);

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn set_allow_universal_access_from_file_urls(&self, allowed: bool);

    fn set_auto_load_images(&self, enabled: bool);

    fn set_cursive_font_family(&self, cursive_font_family: &str);

    fn set_default_charset(&self, default_charset: &str);

    fn set_default_font_family(&self, default_font_family: &str);

    fn set_default_font_size(&self, font_size: u32);

    fn set_default_monospace_font_size(&self, font_size: u32);

    fn set_draw_compositing_indicators(&self, enabled: bool);

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn set_enable_accelerated_2d_canvas(&self, enabled: bool);

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn set_enable_back_forward_navigation_gestures(&self, enabled: bool);

    fn set_enable_caret_browsing(&self, enabled: bool);

    fn set_enable_developer_extras(&self, enabled: bool);

    fn set_enable_dns_prefetching(&self, enabled: bool);

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn set_enable_encrypted_media(&self, enabled: bool);

    fn set_enable_frame_flattening(&self, enabled: bool);

    fn set_enable_fullscreen(&self, enabled: bool);

    fn set_enable_html5_database(&self, enabled: bool);

    fn set_enable_html5_local_storage(&self, enabled: bool);

    fn set_enable_hyperlink_auditing(&self, enabled: bool);

    fn set_enable_java(&self, enabled: bool);

    fn set_enable_javascript(&self, enabled: bool);

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn set_enable_javascript_markup(&self, enabled: bool);

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn set_enable_media(&self, enabled: bool);

    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn set_enable_media_capabilities(&self, enabled: bool);

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_enable_media_stream(&self, enabled: bool);

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_enable_mediasource(&self, enabled: bool);

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_enable_mock_capture_devices(&self, enabled: bool);

    fn set_enable_offline_web_application_cache(&self, enabled: bool);

    fn set_enable_page_cache(&self, enabled: bool);

    fn set_enable_plugins(&self, enabled: bool);

    #[cfg_attr(feature = "v2_16", deprecated)]
    fn set_enable_private_browsing(&self, enabled: bool);

    fn set_enable_resizable_text_areas(&self, enabled: bool);

    fn set_enable_site_specific_quirks(&self, enabled: bool);

    fn set_enable_smooth_scrolling(&self, enabled: bool);

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn set_enable_spatial_navigation(&self, enabled: bool);

    fn set_enable_tabs_to_links(&self, enabled: bool);

    fn set_enable_webaudio(&self, enabled: bool);

    fn set_enable_webgl(&self, enabled: bool);

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn set_enable_write_console_messages_to_stdout(&self, enabled: bool);

    fn set_enable_xss_auditor(&self, enabled: bool);

    fn set_fantasy_font_family(&self, fantasy_font_family: &str);

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_hardware_acceleration_policy(&self, policy: HardwareAccelerationPolicy);

    fn set_javascript_can_access_clipboard(&self, enabled: bool);

    fn set_javascript_can_open_windows_automatically(&self, enabled: bool);

    fn set_load_icons_ignoring_image_load_setting(&self, enabled: bool);

    fn set_media_playback_allows_inline(&self, enabled: bool);

    fn set_media_playback_requires_user_gesture(&self, enabled: bool);

    fn set_minimum_font_size(&self, font_size: u32);

    fn set_monospace_font_family(&self, monospace_font_family: &str);

    fn set_pictograph_font_family(&self, pictograph_font_family: &str);

    fn set_print_backgrounds(&self, print_backgrounds: bool);

    fn set_sans_serif_font_family(&self, sans_serif_font_family: &str);

    fn set_serif_font_family(&self, serif_font_family: &str);

    fn set_user_agent(&self, user_agent: Option<&str>);

    fn set_user_agent_with_application_details(&self, application_name: Option<&str>, application_version: Option<&str>);

    fn set_zoom_text_only(&self, zoom_text_only: bool);

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn connect_property_allow_file_access_from_file_urls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_allow_modal_dialogs_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn connect_property_allow_universal_access_from_file_urls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_auto_load_images_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_cursive_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_default_charset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_default_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_default_font_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_default_monospace_font_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_draw_compositing_indicators_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_property_enable_accelerated_2d_canvas_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn connect_property_enable_back_forward_navigation_gestures_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_caret_browsing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_developer_extras_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_dns_prefetching_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn connect_property_enable_encrypted_media_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_frame_flattening_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_fullscreen_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_html5_database_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_html5_local_storage_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_hyperlink_auditing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_java_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_javascript_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn connect_property_enable_javascript_markup_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn connect_property_enable_media_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn connect_property_enable_media_capabilities_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_enable_media_stream_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_enable_mediasource_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn connect_property_enable_mock_capture_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_offline_web_application_cache_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_page_cache_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_plugins_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg_attr(feature = "v2_16", deprecated)]
    fn connect_property_enable_private_browsing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_resizable_text_areas_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_site_specific_quirks_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_smooth_scrolling_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_enable_spatial_navigation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_tabs_to_links_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_webaudio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_webgl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_property_enable_write_console_messages_to_stdout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_enable_xss_auditor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_fantasy_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn connect_property_hardware_acceleration_policy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_javascript_can_access_clipboard_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_javascript_can_open_windows_automatically_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_load_icons_ignoring_image_load_setting_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_media_playback_allows_inline_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_media_playback_requires_user_gesture_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_minimum_font_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_monospace_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_pictograph_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_print_backgrounds_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_sans_serif_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_serif_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_user_agent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_zoom_text_only_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Settings>> SettingsExt for O {
    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_allow_file_access_from_file_urls(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_allow_file_access_from_file_urls(self.as_ref().to_glib_none().0))
        }
    }

    fn get_allow_modal_dialogs(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_allow_modal_dialogs(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn get_allow_universal_access_from_file_urls(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_allow_universal_access_from_file_urls(self.as_ref().to_glib_none().0))
        }
    }

    fn get_auto_load_images(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_auto_load_images(self.as_ref().to_glib_none().0))
        }
    }

    fn get_cursive_font_family(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_settings_get_cursive_font_family(self.as_ref().to_glib_none().0))
        }
    }

    fn get_default_charset(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_settings_get_default_charset(self.as_ref().to_glib_none().0))
        }
    }

    fn get_default_font_family(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_settings_get_default_font_family(self.as_ref().to_glib_none().0))
        }
    }

    fn get_default_font_size(&self) -> u32 {
        unsafe {
            webkit2_sys::webkit_settings_get_default_font_size(self.as_ref().to_glib_none().0)
        }
    }

    fn get_default_monospace_font_size(&self) -> u32 {
        unsafe {
            webkit2_sys::webkit_settings_get_default_monospace_font_size(self.as_ref().to_glib_none().0)
        }
    }

    fn get_draw_compositing_indicators(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_draw_compositing_indicators(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn get_enable_accelerated_2d_canvas(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_accelerated_2d_canvas(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn get_enable_back_forward_navigation_gestures(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_back_forward_navigation_gestures(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_caret_browsing(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_caret_browsing(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_developer_extras(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_developer_extras(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_dns_prefetching(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_dns_prefetching(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn get_enable_encrypted_media(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_encrypted_media(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_frame_flattening(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_frame_flattening(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_fullscreen(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_fullscreen(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_html5_database(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_html5_database(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_html5_local_storage(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_html5_local_storage(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_hyperlink_auditing(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_hyperlink_auditing(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_java(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_java(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_javascript(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_javascript(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn get_enable_javascript_markup(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_javascript_markup(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn get_enable_media(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_media(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn get_enable_media_capabilities(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_media_capabilities(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn get_enable_media_stream(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_media_stream(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn get_enable_mediasource(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_mediasource(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn get_enable_mock_capture_devices(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_mock_capture_devices(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_offline_web_application_cache(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_offline_web_application_cache(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_page_cache(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_page_cache(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_plugins(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_plugins(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_private_browsing(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_private_browsing(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_resizable_text_areas(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_resizable_text_areas(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_site_specific_quirks(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_site_specific_quirks(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_smooth_scrolling(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_smooth_scrolling(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn get_enable_spatial_navigation(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_spatial_navigation(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_tabs_to_links(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_tabs_to_links(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_webaudio(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_webaudio(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_webgl(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_webgl(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn get_enable_write_console_messages_to_stdout(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_write_console_messages_to_stdout(self.as_ref().to_glib_none().0))
        }
    }

    fn get_enable_xss_auditor(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_enable_xss_auditor(self.as_ref().to_glib_none().0))
        }
    }

    fn get_fantasy_font_family(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_settings_get_fantasy_font_family(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_hardware_acceleration_policy(&self) -> HardwareAccelerationPolicy {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_hardware_acceleration_policy(self.as_ref().to_glib_none().0))
        }
    }

    fn get_javascript_can_access_clipboard(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_javascript_can_access_clipboard(self.as_ref().to_glib_none().0))
        }
    }

    fn get_javascript_can_open_windows_automatically(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_javascript_can_open_windows_automatically(self.as_ref().to_glib_none().0))
        }
    }

    fn get_load_icons_ignoring_image_load_setting(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_load_icons_ignoring_image_load_setting(self.as_ref().to_glib_none().0))
        }
    }

    fn get_media_playback_allows_inline(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_media_playback_allows_inline(self.as_ref().to_glib_none().0))
        }
    }

    fn get_media_playback_requires_user_gesture(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_media_playback_requires_user_gesture(self.as_ref().to_glib_none().0))
        }
    }

    fn get_minimum_font_size(&self) -> u32 {
        unsafe {
            webkit2_sys::webkit_settings_get_minimum_font_size(self.as_ref().to_glib_none().0)
        }
    }

    fn get_monospace_font_family(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_settings_get_monospace_font_family(self.as_ref().to_glib_none().0))
        }
    }

    fn get_pictograph_font_family(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_settings_get_pictograph_font_family(self.as_ref().to_glib_none().0))
        }
    }

    fn get_print_backgrounds(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_print_backgrounds(self.as_ref().to_glib_none().0))
        }
    }

    fn get_sans_serif_font_family(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_settings_get_sans_serif_font_family(self.as_ref().to_glib_none().0))
        }
    }

    fn get_serif_font_family(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_settings_get_serif_font_family(self.as_ref().to_glib_none().0))
        }
    }

    fn get_user_agent(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_settings_get_user_agent(self.as_ref().to_glib_none().0))
        }
    }

    fn get_zoom_text_only(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_settings_get_zoom_text_only(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn set_allow_file_access_from_file_urls(&self, allowed: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_allow_file_access_from_file_urls(self.as_ref().to_glib_none().0, allowed.to_glib());
        }
    }

    fn set_allow_modal_dialogs(&self, allowed: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_allow_modal_dialogs(self.as_ref().to_glib_none().0, allowed.to_glib());
        }
    }

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn set_allow_universal_access_from_file_urls(&self, allowed: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_allow_universal_access_from_file_urls(self.as_ref().to_glib_none().0, allowed.to_glib());
        }
    }

    fn set_auto_load_images(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_auto_load_images(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_cursive_font_family(&self, cursive_font_family: &str) {
        unsafe {
            webkit2_sys::webkit_settings_set_cursive_font_family(self.as_ref().to_glib_none().0, cursive_font_family.to_glib_none().0);
        }
    }

    fn set_default_charset(&self, default_charset: &str) {
        unsafe {
            webkit2_sys::webkit_settings_set_default_charset(self.as_ref().to_glib_none().0, default_charset.to_glib_none().0);
        }
    }

    fn set_default_font_family(&self, default_font_family: &str) {
        unsafe {
            webkit2_sys::webkit_settings_set_default_font_family(self.as_ref().to_glib_none().0, default_font_family.to_glib_none().0);
        }
    }

    fn set_default_font_size(&self, font_size: u32) {
        unsafe {
            webkit2_sys::webkit_settings_set_default_font_size(self.as_ref().to_glib_none().0, font_size);
        }
    }

    fn set_default_monospace_font_size(&self, font_size: u32) {
        unsafe {
            webkit2_sys::webkit_settings_set_default_monospace_font_size(self.as_ref().to_glib_none().0, font_size);
        }
    }

    fn set_draw_compositing_indicators(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_draw_compositing_indicators(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn set_enable_accelerated_2d_canvas(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_accelerated_2d_canvas(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn set_enable_back_forward_navigation_gestures(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_back_forward_navigation_gestures(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_caret_browsing(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_caret_browsing(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_developer_extras(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_developer_extras(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_dns_prefetching(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_dns_prefetching(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn set_enable_encrypted_media(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_encrypted_media(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_frame_flattening(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_frame_flattening(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_fullscreen(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_fullscreen(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_html5_database(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_html5_database(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_html5_local_storage(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_html5_local_storage(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_hyperlink_auditing(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_hyperlink_auditing(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_java(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_java(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_javascript(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_javascript(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn set_enable_javascript_markup(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_javascript_markup(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn set_enable_media(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_media(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn set_enable_media_capabilities(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_media_capabilities(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_enable_media_stream(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_media_stream(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_enable_mediasource(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_mediasource(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn set_enable_mock_capture_devices(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_mock_capture_devices(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_offline_web_application_cache(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_offline_web_application_cache(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_page_cache(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_page_cache(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_plugins(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_plugins(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_private_browsing(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_private_browsing(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_resizable_text_areas(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_resizable_text_areas(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_site_specific_quirks(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_site_specific_quirks(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_smooth_scrolling(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_smooth_scrolling(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn set_enable_spatial_navigation(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_spatial_navigation(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_tabs_to_links(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_tabs_to_links(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_webaudio(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_webaudio(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_webgl(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_webgl(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn set_enable_write_console_messages_to_stdout(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_write_console_messages_to_stdout(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_enable_xss_auditor(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_enable_xss_auditor(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_fantasy_font_family(&self, fantasy_font_family: &str) {
        unsafe {
            webkit2_sys::webkit_settings_set_fantasy_font_family(self.as_ref().to_glib_none().0, fantasy_font_family.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn set_hardware_acceleration_policy(&self, policy: HardwareAccelerationPolicy) {
        unsafe {
            webkit2_sys::webkit_settings_set_hardware_acceleration_policy(self.as_ref().to_glib_none().0, policy.to_glib());
        }
    }

    fn set_javascript_can_access_clipboard(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_javascript_can_access_clipboard(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_javascript_can_open_windows_automatically(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_javascript_can_open_windows_automatically(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_load_icons_ignoring_image_load_setting(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_load_icons_ignoring_image_load_setting(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_media_playback_allows_inline(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_media_playback_allows_inline(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_media_playback_requires_user_gesture(&self, enabled: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_media_playback_requires_user_gesture(self.as_ref().to_glib_none().0, enabled.to_glib());
        }
    }

    fn set_minimum_font_size(&self, font_size: u32) {
        unsafe {
            webkit2_sys::webkit_settings_set_minimum_font_size(self.as_ref().to_glib_none().0, font_size);
        }
    }

    fn set_monospace_font_family(&self, monospace_font_family: &str) {
        unsafe {
            webkit2_sys::webkit_settings_set_monospace_font_family(self.as_ref().to_glib_none().0, monospace_font_family.to_glib_none().0);
        }
    }

    fn set_pictograph_font_family(&self, pictograph_font_family: &str) {
        unsafe {
            webkit2_sys::webkit_settings_set_pictograph_font_family(self.as_ref().to_glib_none().0, pictograph_font_family.to_glib_none().0);
        }
    }

    fn set_print_backgrounds(&self, print_backgrounds: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_print_backgrounds(self.as_ref().to_glib_none().0, print_backgrounds.to_glib());
        }
    }

    fn set_sans_serif_font_family(&self, sans_serif_font_family: &str) {
        unsafe {
            webkit2_sys::webkit_settings_set_sans_serif_font_family(self.as_ref().to_glib_none().0, sans_serif_font_family.to_glib_none().0);
        }
    }

    fn set_serif_font_family(&self, serif_font_family: &str) {
        unsafe {
            webkit2_sys::webkit_settings_set_serif_font_family(self.as_ref().to_glib_none().0, serif_font_family.to_glib_none().0);
        }
    }

    fn set_user_agent(&self, user_agent: Option<&str>) {
        unsafe {
            webkit2_sys::webkit_settings_set_user_agent(self.as_ref().to_glib_none().0, user_agent.to_glib_none().0);
        }
    }

    fn set_user_agent_with_application_details(&self, application_name: Option<&str>, application_version: Option<&str>) {
        unsafe {
            webkit2_sys::webkit_settings_set_user_agent_with_application_details(self.as_ref().to_glib_none().0, application_name.to_glib_none().0, application_version.to_glib_none().0);
        }
    }

    fn set_zoom_text_only(&self, zoom_text_only: bool) {
        unsafe {
            webkit2_sys::webkit_settings_set_zoom_text_only(self.as_ref().to_glib_none().0, zoom_text_only.to_glib());
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn connect_property_allow_file_access_from_file_urls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_allow_file_access_from_file_urls_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::allow-file-access-from-file-urls\0".as_ptr() as *const _,
                Some(transmute(notify_allow_file_access_from_file_urls_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_allow_modal_dialogs_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_allow_modal_dialogs_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::allow-modal-dialogs\0".as_ptr() as *const _,
                Some(transmute(notify_allow_modal_dialogs_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_14", feature = "dox"))]
    fn connect_property_allow_universal_access_from_file_urls_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_allow_universal_access_from_file_urls_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::allow-universal-access-from-file-urls\0".as_ptr() as *const _,
                Some(transmute(notify_allow_universal_access_from_file_urls_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_auto_load_images_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_auto_load_images_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::auto-load-images\0".as_ptr() as *const _,
                Some(transmute(notify_auto_load_images_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_cursive_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cursive_font_family_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cursive-font-family\0".as_ptr() as *const _,
                Some(transmute(notify_cursive_font_family_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_default_charset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_charset_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::default-charset\0".as_ptr() as *const _,
                Some(transmute(notify_default_charset_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_default_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_font_family_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::default-font-family\0".as_ptr() as *const _,
                Some(transmute(notify_default_font_family_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_default_font_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_font_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::default-font-size\0".as_ptr() as *const _,
                Some(transmute(notify_default_font_size_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_default_monospace_font_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_monospace_font_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::default-monospace-font-size\0".as_ptr() as *const _,
                Some(transmute(notify_default_monospace_font_size_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_draw_compositing_indicators_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_draw_compositing_indicators_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::draw-compositing-indicators\0".as_ptr() as *const _,
                Some(transmute(notify_draw_compositing_indicators_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_property_enable_accelerated_2d_canvas_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_accelerated_2d_canvas_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-accelerated-2d-canvas\0".as_ptr() as *const _,
                Some(transmute(notify_enable_accelerated_2d_canvas_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn connect_property_enable_back_forward_navigation_gestures_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_back_forward_navigation_gestures_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-back-forward-navigation-gestures\0".as_ptr() as *const _,
                Some(transmute(notify_enable_back_forward_navigation_gestures_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_caret_browsing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_caret_browsing_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-caret-browsing\0".as_ptr() as *const _,
                Some(transmute(notify_enable_caret_browsing_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_developer_extras_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_developer_extras_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-developer-extras\0".as_ptr() as *const _,
                Some(transmute(notify_enable_developer_extras_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_dns_prefetching_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_dns_prefetching_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-dns-prefetching\0".as_ptr() as *const _,
                Some(transmute(notify_enable_dns_prefetching_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_20", feature = "dox"))]
    fn connect_property_enable_encrypted_media_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_encrypted_media_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-encrypted-media\0".as_ptr() as *const _,
                Some(transmute(notify_enable_encrypted_media_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_frame_flattening_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_frame_flattening_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-frame-flattening\0".as_ptr() as *const _,
                Some(transmute(notify_enable_frame_flattening_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_fullscreen_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_fullscreen_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-fullscreen\0".as_ptr() as *const _,
                Some(transmute(notify_enable_fullscreen_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_html5_database_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_html5_database_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-html5-database\0".as_ptr() as *const _,
                Some(transmute(notify_enable_html5_database_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_html5_local_storage_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_html5_local_storage_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-html5-local-storage\0".as_ptr() as *const _,
                Some(transmute(notify_enable_html5_local_storage_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_hyperlink_auditing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_hyperlink_auditing_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-hyperlink-auditing\0".as_ptr() as *const _,
                Some(transmute(notify_enable_hyperlink_auditing_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_java_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_java_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-java\0".as_ptr() as *const _,
                Some(transmute(notify_enable_java_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_javascript_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_javascript_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-javascript\0".as_ptr() as *const _,
                Some(transmute(notify_enable_javascript_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn connect_property_enable_javascript_markup_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_javascript_markup_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-javascript-markup\0".as_ptr() as *const _,
                Some(transmute(notify_enable_javascript_markup_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_26", feature = "dox"))]
    fn connect_property_enable_media_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_media_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-media\0".as_ptr() as *const _,
                Some(transmute(notify_enable_media_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_22", feature = "dox"))]
    fn connect_property_enable_media_capabilities_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_media_capabilities_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-media-capabilities\0".as_ptr() as *const _,
                Some(transmute(notify_enable_media_capabilities_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_enable_media_stream_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_media_stream_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-media-stream\0".as_ptr() as *const _,
                Some(transmute(notify_enable_media_stream_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_enable_mediasource_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_mediasource_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-mediasource\0".as_ptr() as *const _,
                Some(transmute(notify_enable_mediasource_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_24", feature = "dox"))]
    fn connect_property_enable_mock_capture_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_mock_capture_devices_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-mock-capture-devices\0".as_ptr() as *const _,
                Some(transmute(notify_enable_mock_capture_devices_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_offline_web_application_cache_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_offline_web_application_cache_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-offline-web-application-cache\0".as_ptr() as *const _,
                Some(transmute(notify_enable_offline_web_application_cache_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_page_cache_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_page_cache_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-page-cache\0".as_ptr() as *const _,
                Some(transmute(notify_enable_page_cache_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_plugins_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_plugins_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-plugins\0".as_ptr() as *const _,
                Some(transmute(notify_enable_plugins_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_private_browsing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_private_browsing_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-private-browsing\0".as_ptr() as *const _,
                Some(transmute(notify_enable_private_browsing_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_resizable_text_areas_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_resizable_text_areas_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-resizable-text-areas\0".as_ptr() as *const _,
                Some(transmute(notify_enable_resizable_text_areas_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_site_specific_quirks_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_site_specific_quirks_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-site-specific-quirks\0".as_ptr() as *const _,
                Some(transmute(notify_enable_site_specific_quirks_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_smooth_scrolling_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_smooth_scrolling_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-smooth-scrolling\0".as_ptr() as *const _,
                Some(transmute(notify_enable_smooth_scrolling_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_enable_spatial_navigation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_spatial_navigation_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-spatial-navigation\0".as_ptr() as *const _,
                Some(transmute(notify_enable_spatial_navigation_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_tabs_to_links_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_tabs_to_links_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-tabs-to-links\0".as_ptr() as *const _,
                Some(transmute(notify_enable_tabs_to_links_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_webaudio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_webaudio_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-webaudio\0".as_ptr() as *const _,
                Some(transmute(notify_enable_webaudio_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_webgl_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_webgl_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-webgl\0".as_ptr() as *const _,
                Some(transmute(notify_enable_webgl_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_property_enable_write_console_messages_to_stdout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_write_console_messages_to_stdout_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-write-console-messages-to-stdout\0".as_ptr() as *const _,
                Some(transmute(notify_enable_write_console_messages_to_stdout_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_enable_xss_auditor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enable_xss_auditor_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enable-xss-auditor\0".as_ptr() as *const _,
                Some(transmute(notify_enable_xss_auditor_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_fantasy_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_fantasy_font_family_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::fantasy-font-family\0".as_ptr() as *const _,
                Some(transmute(notify_fantasy_font_family_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn connect_property_hardware_acceleration_policy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hardware_acceleration_policy_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hardware-acceleration-policy\0".as_ptr() as *const _,
                Some(transmute(notify_hardware_acceleration_policy_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_javascript_can_access_clipboard_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_javascript_can_access_clipboard_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::javascript-can-access-clipboard\0".as_ptr() as *const _,
                Some(transmute(notify_javascript_can_access_clipboard_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_javascript_can_open_windows_automatically_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_javascript_can_open_windows_automatically_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::javascript-can-open-windows-automatically\0".as_ptr() as *const _,
                Some(transmute(notify_javascript_can_open_windows_automatically_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_load_icons_ignoring_image_load_setting_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_load_icons_ignoring_image_load_setting_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::load-icons-ignoring-image-load-setting\0".as_ptr() as *const _,
                Some(transmute(notify_load_icons_ignoring_image_load_setting_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_media_playback_allows_inline_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_playback_allows_inline_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-playback-allows-inline\0".as_ptr() as *const _,
                Some(transmute(notify_media_playback_allows_inline_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_media_playback_requires_user_gesture_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_playback_requires_user_gesture_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-playback-requires-user-gesture\0".as_ptr() as *const _,
                Some(transmute(notify_media_playback_requires_user_gesture_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_minimum_font_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_minimum_font_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::minimum-font-size\0".as_ptr() as *const _,
                Some(transmute(notify_minimum_font_size_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_monospace_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_monospace_font_family_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::monospace-font-family\0".as_ptr() as *const _,
                Some(transmute(notify_monospace_font_family_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_pictograph_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pictograph_font_family_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pictograph-font-family\0".as_ptr() as *const _,
                Some(transmute(notify_pictograph_font_family_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_print_backgrounds_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_print_backgrounds_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::print-backgrounds\0".as_ptr() as *const _,
                Some(transmute(notify_print_backgrounds_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_sans_serif_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sans_serif_font_family_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sans-serif-font-family\0".as_ptr() as *const _,
                Some(transmute(notify_sans_serif_font_family_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_serif_font_family_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_serif_font_family_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::serif-font-family\0".as_ptr() as *const _,
                Some(transmute(notify_serif_font_family_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_user_agent_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_user_agent_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::user-agent\0".as_ptr() as *const _,
                Some(transmute(notify_user_agent_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_zoom_text_only_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_zoom_text_only_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitSettings, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Settings>
        {
            let f: &F = &*(f as *const F);
            f(&Settings::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::zoom-text-only\0".as_ptr() as *const _,
                Some(transmute(notify_zoom_text_only_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Settings {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Settings")
    }
}
