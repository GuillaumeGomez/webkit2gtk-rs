// This file was generated by gir (d933f9a) from gir-files (469db10)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct SecurityManager(Object<ffi::WebKitSecurityManager, ffi::WebKitSecurityManagerClass>);

    match fn {
        get_type => || ffi::webkit_security_manager_get_type(),
    }
}

pub trait SecurityManagerExt {
    fn register_uri_scheme_as_cors_enabled(&self, scheme: &str);

    fn register_uri_scheme_as_display_isolated(&self, scheme: &str);

    fn register_uri_scheme_as_empty_document(&self, scheme: &str);

    fn register_uri_scheme_as_local(&self, scheme: &str);

    fn register_uri_scheme_as_no_access(&self, scheme: &str);

    fn register_uri_scheme_as_secure(&self, scheme: &str);

    fn uri_scheme_is_cors_enabled(&self, scheme: &str) -> bool;

    fn uri_scheme_is_display_isolated(&self, scheme: &str) -> bool;

    fn uri_scheme_is_empty_document(&self, scheme: &str) -> bool;

    fn uri_scheme_is_local(&self, scheme: &str) -> bool;

    fn uri_scheme_is_no_access(&self, scheme: &str) -> bool;

    fn uri_scheme_is_secure(&self, scheme: &str) -> bool;
}

impl<O: IsA<SecurityManager>> SecurityManagerExt for O {
    fn register_uri_scheme_as_cors_enabled(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_cors_enabled(self.to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn register_uri_scheme_as_display_isolated(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_display_isolated(self.to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn register_uri_scheme_as_empty_document(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_empty_document(self.to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn register_uri_scheme_as_local(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_local(self.to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn register_uri_scheme_as_no_access(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_no_access(self.to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn register_uri_scheme_as_secure(&self, scheme: &str) {
        unsafe {
            ffi::webkit_security_manager_register_uri_scheme_as_secure(self.to_glib_none().0, scheme.to_glib_none().0);
        }
    }

    fn uri_scheme_is_cors_enabled(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_cors_enabled(self.to_glib_none().0, scheme.to_glib_none().0))
        }
    }

    fn uri_scheme_is_display_isolated(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_display_isolated(self.to_glib_none().0, scheme.to_glib_none().0))
        }
    }

    fn uri_scheme_is_empty_document(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_empty_document(self.to_glib_none().0, scheme.to_glib_none().0))
        }
    }

    fn uri_scheme_is_local(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_local(self.to_glib_none().0, scheme.to_glib_none().0))
        }
    }

    fn uri_scheme_is_no_access(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_no_access(self.to_glib_none().0, scheme.to_glib_none().0))
        }
    }

    fn uri_scheme_is_secure(&self, scheme: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_security_manager_uri_scheme_is_secure(self.to_glib_none().0, scheme.to_glib_none().0))
        }
    }
}
