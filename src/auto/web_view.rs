// This file was generated by gir (d933f9a) from gir-files (469db10)
// DO NOT EDIT

#[cfg(any(feature = "v2_2", feature = "dox"))]
use AuthenticationRequest;
use BackForwardList;
use BackForwardListItem;
#[cfg(any(feature = "v2_8", feature = "dox"))]
use ColorChooserRequest;
use ContextMenu;
use Download;
#[cfg(any(feature = "v2_10", feature = "dox"))]
use EditorState;
use Error;
use FileChooserRequest;
use FindController;
use FormSubmissionRequest;
use HitTestResult;
use InsecureContentEvent;
use LoadEvent;
#[cfg(any(feature = "v2_6", feature = "dox"))]
use NavigationAction;
#[cfg(any(feature = "v2_8", feature = "dox"))]
use Notification;
use PermissionRequest;
use PolicyDecision;
use PolicyDecisionType;
use PrintOperation;
use ScriptDialog;
use Settings;
use URIRequest;
#[cfg(any(feature = "v2_6", feature = "dox"))]
use UserContentManager;
use WebContext;
use WebInspector;
use WebResource;
use WebViewBase;
#[cfg(any(feature = "v2_12", feature = "dox"))]
use WebViewSessionState;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use WebsiteDataManager;
use WindowProperties;
use cairo;
use ffi;
use gdk;
use gdk_ffi;
use gio;
#[cfg(any(feature = "v2_6", feature = "dox"))]
use gio_ffi;
use glib;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gtk;
use gtk_ffi;
use java_script_core;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct WebView(Object<ffi::WebKitWebView, ffi::WebKitWebViewClass>): [
        WebViewBase,
        gtk::Container => gtk_ffi::GtkContainer,
        gtk::Widget => gtk_ffi::GtkWidget,
    ];

    match fn {
        get_type => || ffi::webkit_web_view_get_type(),
    }
}

impl WebView {
    pub fn new() -> WebView {
        assert_initialized_main_thread!();
        unsafe {
            gtk::Widget::from_glib_none(ffi::webkit_web_view_new()).downcast_unchecked()
        }
    }

    pub fn new_with_context(context: &WebContext) -> WebView {
        skip_assert_initialized!();
        unsafe {
            gtk::Widget::from_glib_none(ffi::webkit_web_view_new_with_context(context.to_glib_none().0)).downcast_unchecked()
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    pub fn new_with_related_view(web_view: &WebView) -> WebView {
        skip_assert_initialized!();
        unsafe {
            gtk::Widget::from_glib_full(ffi::webkit_web_view_new_with_related_view(web_view.to_glib_none().0)).downcast_unchecked()
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    pub fn new_with_settings(settings: &Settings) -> WebView {
        skip_assert_initialized!();
        unsafe {
            gtk::Widget::from_glib_none(ffi::webkit_web_view_new_with_settings(settings.to_glib_none().0)).downcast_unchecked()
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    pub fn new_with_user_content_manager(user_content_manager: &UserContentManager) -> WebView {
        skip_assert_initialized!();
        unsafe {
            gtk::Widget::from_glib_none(ffi::webkit_web_view_new_with_user_content_manager(user_content_manager.to_glib_none().0)).downcast_unchecked()
        }
    }
}

impl Default for WebView {
    fn default() -> Self {
        Self::new()
    }
}

pub trait WebViewExt {
    //fn can_execute_editing_command<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, command: &str, cancellable: P, callback: Q, user_data: R);

    fn can_go_back(&self) -> bool;

    fn can_go_forward(&self) -> bool;

    fn can_show_mime_type(&self, mime_type: &str) -> bool;

    fn download_uri(&self, uri: &str) -> Option<Download>;

    fn execute_editing_command(&self, command: &str);

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn execute_editing_command_with_argument(&self, command: &str, argument: &str);

    fn get_back_forward_list(&self) -> Option<BackForwardList>;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_background_color(&self) -> gdk::RGBA;

    fn get_context(&self) -> Option<WebContext>;

    fn get_custom_charset(&self) -> Option<String>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_editor_state(&self) -> Option<EditorState>;

    fn get_estimated_load_progress(&self) -> f64;

    fn get_favicon(&self) -> Option<cairo::Surface>;

    fn get_find_controller(&self) -> Option<FindController>;

    fn get_inspector(&self) -> Option<WebInspector>;

    fn get_javascript_global_context(&self) -> Option<java_script_core::GlobalContext>;

    fn get_main_resource(&self) -> Option<WebResource>;

    fn get_page_id(&self) -> u64;

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_session_state(&self) -> Option<WebViewSessionState>;

    fn get_settings(&self) -> Option<Settings>;

    //fn get_snapshot<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, region: SnapshotRegion, options: SnapshotOptions, cancellable: P, callback: Q, user_data: R);

    fn get_title(&self) -> Option<String>;

    fn get_tls_info(&self) -> Option<(gio::TlsCertificate, gio::TlsCertificateFlags)>;

    fn get_uri(&self) -> Option<String>;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn get_user_content_manager(&self) -> Option<UserContentManager>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_website_data_manager(&self) -> Option<WebsiteDataManager>;

    fn get_window_properties(&self) -> Option<WindowProperties>;

    fn get_zoom_level(&self) -> f64;

    fn go_back(&self);

    fn go_forward(&self);

    fn go_to_back_forward_list_item(&self, list_item: &BackForwardListItem);

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    fn is_controlled_by_automation(&self) -> bool;

    fn is_editable(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn is_ephemeral(&self) -> bool;

    fn is_loading(&self) -> bool;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn is_playing_audio(&self) -> bool;

    fn load_alternate_html<'a, P: Into<Option<&'a str>>>(&self, content: &str, content_uri: &str, base_uri: P);

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn load_bytes<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>, R: Into<Option<&'c str>>>(&self, bytes: &glib::Bytes, mime_type: P, encoding: Q, base_uri: R);

    fn load_html<'a, P: Into<Option<&'a str>>>(&self, content: &str, base_uri: P);

    fn load_plain_text(&self, plain_text: &str);

    fn load_request(&self, request: &URIRequest);

    fn load_uri(&self, uri: &str);

    fn reload(&self);

    fn reload_bypass_cache(&self);

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn restore_session_state(&self, state: &WebViewSessionState);

    //fn run_javascript<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, script: &str, cancellable: P, callback: Q, user_data: R);

    //fn run_javascript_from_gresource<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, resource: &str, cancellable: P, callback: Q, user_data: R);

    //fn save<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, save_mode: SaveMode, cancellable: P, callback: Q, user_data: R);

    //fn save_to_file<'a, 'b, P: IsA</*Ignored*/gio::File>, Q: Into<Option<&'a gio::Cancellable>>, R: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, file: &P, save_mode: SaveMode, cancellable: Q, callback: R, user_data: S);

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_background_color(&self, rgba: &gdk::RGBA);

    fn set_custom_charset<'a, P: Into<Option<&'a str>>>(&self, charset: P);

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_editable(&self, editable: bool);

    fn set_settings(&self, settings: &Settings);

    fn set_zoom_level(&self, zoom_level: f64);

    fn stop_loading(&self);

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn try_close(&self);

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_property_editable(&self) -> bool;

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    fn get_property_is_controlled_by_automation(&self) -> bool;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_property_is_ephemeral(&self) -> bool;

    fn get_property_is_loading(&self) -> bool;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_property_is_playing_audio(&self) -> bool;

    fn get_property_web_context(&self) -> Option<WebContext>;

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_authenticate<F: Fn(&Self, &AuthenticationRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_close<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_context_menu<F: Fn(&Self, &ContextMenu, &gdk::Event, &HitTestResult) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_context_menu_dismissed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_create<F: Fn(&Self, &NavigationAction) -> Option<gtk::Widget> + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_decide_policy<F: Fn(&Self, &PolicyDecision, PolicyDecisionType) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_enter_fullscreen<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_insecure_content_detected<F: Fn(&Self, InsecureContentEvent) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_leave_fullscreen<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_load_changed<F: Fn(&Self, LoadEvent) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_load_failed<F: Fn(&Self, LoadEvent, &str, &Error) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_load_failed_with_tls_errors<F: Fn(&Self, &str, &gio::TlsCertificate, gio::TlsCertificateFlags) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_mouse_target_changed<F: Fn(&Self, &HitTestResult, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_permission_request<F: Fn(&Self, &PermissionRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_print<F: Fn(&Self, &PrintOperation) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_ready_to_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_resource_load_started<F: Fn(&Self, &WebResource, &URIRequest) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_run_as_modal<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_run_color_chooser<F: Fn(&Self, &ColorChooserRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_run_file_chooser<F: Fn(&Self, &FileChooserRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_script_dialog<F: Fn(&Self, &ScriptDialog) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_show_notification<F: Fn(&Self, &Notification) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    //#[cfg(any(feature = "v2_18", feature = "dox"))]
    //fn connect_show_option_menu<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    fn connect_submit_form<F: Fn(&Self, &FormSubmissionRequest) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_web_process_crashed<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_property_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_estimated_load_progress_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_favicon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    fn connect_property_is_controlled_by_automation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn connect_property_is_ephemeral_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_is_loading_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_property_is_playing_audio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_related_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_property_settings_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_property_user_content_manager_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_web_context_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_zoom_level_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<WebView> + IsA<glib::object::Object>> WebViewExt for O {
    //fn can_execute_editing_command<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, command: &str, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::webkit_web_view_can_execute_editing_command() }
    //}

    fn can_go_back(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_web_view_can_go_back(self.to_glib_none().0))
        }
    }

    fn can_go_forward(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_web_view_can_go_forward(self.to_glib_none().0))
        }
    }

    fn can_show_mime_type(&self, mime_type: &str) -> bool {
        unsafe {
            from_glib(ffi::webkit_web_view_can_show_mime_type(self.to_glib_none().0, mime_type.to_glib_none().0))
        }
    }

    fn download_uri(&self, uri: &str) -> Option<Download> {
        unsafe {
            from_glib_full(ffi::webkit_web_view_download_uri(self.to_glib_none().0, uri.to_glib_none().0))
        }
    }

    fn execute_editing_command(&self, command: &str) {
        unsafe {
            ffi::webkit_web_view_execute_editing_command(self.to_glib_none().0, command.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn execute_editing_command_with_argument(&self, command: &str, argument: &str) {
        unsafe {
            ffi::webkit_web_view_execute_editing_command_with_argument(self.to_glib_none().0, command.to_glib_none().0, argument.to_glib_none().0);
        }
    }

    fn get_back_forward_list(&self) -> Option<BackForwardList> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_back_forward_list(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_background_color(&self) -> gdk::RGBA {
        unsafe {
            let mut rgba = gdk::RGBA::uninitialized();
            ffi::webkit_web_view_get_background_color(self.to_glib_none().0, rgba.to_glib_none_mut().0);
            rgba
        }
    }

    fn get_context(&self) -> Option<WebContext> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_context(self.to_glib_none().0))
        }
    }

    fn get_custom_charset(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_custom_charset(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_editor_state(&self) -> Option<EditorState> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_editor_state(self.to_glib_none().0))
        }
    }

    fn get_estimated_load_progress(&self) -> f64 {
        unsafe {
            ffi::webkit_web_view_get_estimated_load_progress(self.to_glib_none().0)
        }
    }

    fn get_favicon(&self) -> Option<cairo::Surface> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_favicon(self.to_glib_none().0))
        }
    }

    fn get_find_controller(&self) -> Option<FindController> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_find_controller(self.to_glib_none().0))
        }
    }

    fn get_inspector(&self) -> Option<WebInspector> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_inspector(self.to_glib_none().0))
        }
    }

    fn get_javascript_global_context(&self) -> Option<java_script_core::GlobalContext> {
        unsafe {
            from_glib_full(ffi::webkit_web_view_get_javascript_global_context(self.to_glib_none().0))
        }
    }

    fn get_main_resource(&self) -> Option<WebResource> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_main_resource(self.to_glib_none().0))
        }
    }

    fn get_page_id(&self) -> u64 {
        unsafe {
            ffi::webkit_web_view_get_page_id(self.to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn get_session_state(&self) -> Option<WebViewSessionState> {
        unsafe {
            from_glib_full(ffi::webkit_web_view_get_session_state(self.to_glib_none().0))
        }
    }

    fn get_settings(&self) -> Option<Settings> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_settings(self.to_glib_none().0))
        }
    }

    //fn get_snapshot<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, region: SnapshotRegion, options: SnapshotOptions, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::webkit_web_view_get_snapshot() }
    //}

    fn get_title(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_title(self.to_glib_none().0))
        }
    }

    fn get_tls_info(&self) -> Option<(gio::TlsCertificate, gio::TlsCertificateFlags)> {
        unsafe {
            let mut certificate = ptr::null_mut();
            let mut errors = mem::uninitialized();
            let ret = from_glib(ffi::webkit_web_view_get_tls_info(self.to_glib_none().0, &mut certificate, &mut errors));
            if ret { Some((from_glib_none(certificate), from_glib(errors))) } else { None }
        }
    }

    fn get_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_uri(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn get_user_content_manager(&self) -> Option<UserContentManager> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_user_content_manager(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_website_data_manager(&self) -> Option<WebsiteDataManager> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_website_data_manager(self.to_glib_none().0))
        }
    }

    fn get_window_properties(&self) -> Option<WindowProperties> {
        unsafe {
            from_glib_none(ffi::webkit_web_view_get_window_properties(self.to_glib_none().0))
        }
    }

    fn get_zoom_level(&self) -> f64 {
        unsafe {
            ffi::webkit_web_view_get_zoom_level(self.to_glib_none().0)
        }
    }

    fn go_back(&self) {
        unsafe {
            ffi::webkit_web_view_go_back(self.to_glib_none().0);
        }
    }

    fn go_forward(&self) {
        unsafe {
            ffi::webkit_web_view_go_forward(self.to_glib_none().0);
        }
    }

    fn go_to_back_forward_list_item(&self, list_item: &BackForwardListItem) {
        unsafe {
            ffi::webkit_web_view_go_to_back_forward_list_item(self.to_glib_none().0, list_item.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    fn is_controlled_by_automation(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_web_view_is_controlled_by_automation(self.to_glib_none().0))
        }
    }

    fn is_editable(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_web_view_is_editable(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn is_ephemeral(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_web_view_is_ephemeral(self.to_glib_none().0))
        }
    }

    fn is_loading(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_web_view_is_loading(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn is_playing_audio(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_web_view_is_playing_audio(self.to_glib_none().0))
        }
    }

    fn load_alternate_html<'a, P: Into<Option<&'a str>>>(&self, content: &str, content_uri: &str, base_uri: P) {
        let base_uri = base_uri.into();
        let base_uri = base_uri.to_glib_none();
        unsafe {
            ffi::webkit_web_view_load_alternate_html(self.to_glib_none().0, content.to_glib_none().0, content_uri.to_glib_none().0, base_uri.0);
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn load_bytes<'a, 'b, 'c, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>, R: Into<Option<&'c str>>>(&self, bytes: &glib::Bytes, mime_type: P, encoding: Q, base_uri: R) {
        let mime_type = mime_type.into();
        let mime_type = mime_type.to_glib_none();
        let encoding = encoding.into();
        let encoding = encoding.to_glib_none();
        let base_uri = base_uri.into();
        let base_uri = base_uri.to_glib_none();
        unsafe {
            ffi::webkit_web_view_load_bytes(self.to_glib_none().0, bytes.to_glib_none().0, mime_type.0, encoding.0, base_uri.0);
        }
    }

    fn load_html<'a, P: Into<Option<&'a str>>>(&self, content: &str, base_uri: P) {
        let base_uri = base_uri.into();
        let base_uri = base_uri.to_glib_none();
        unsafe {
            ffi::webkit_web_view_load_html(self.to_glib_none().0, content.to_glib_none().0, base_uri.0);
        }
    }

    fn load_plain_text(&self, plain_text: &str) {
        unsafe {
            ffi::webkit_web_view_load_plain_text(self.to_glib_none().0, plain_text.to_glib_none().0);
        }
    }

    fn load_request(&self, request: &URIRequest) {
        unsafe {
            ffi::webkit_web_view_load_request(self.to_glib_none().0, request.to_glib_none().0);
        }
    }

    fn load_uri(&self, uri: &str) {
        unsafe {
            ffi::webkit_web_view_load_uri(self.to_glib_none().0, uri.to_glib_none().0);
        }
    }

    fn reload(&self) {
        unsafe {
            ffi::webkit_web_view_reload(self.to_glib_none().0);
        }
    }

    fn reload_bypass_cache(&self) {
        unsafe {
            ffi::webkit_web_view_reload_bypass_cache(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn restore_session_state(&self, state: &WebViewSessionState) {
        unsafe {
            ffi::webkit_web_view_restore_session_state(self.to_glib_none().0, state.to_glib_none().0);
        }
    }

    //fn run_javascript<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, script: &str, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::webkit_web_view_run_javascript() }
    //}

    //fn run_javascript_from_gresource<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, resource: &str, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::webkit_web_view_run_javascript_from_gresource() }
    //}

    //fn save<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, save_mode: SaveMode, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::webkit_web_view_save() }
    //}

    //fn save_to_file<'a, 'b, P: IsA</*Ignored*/gio::File>, Q: Into<Option<&'a gio::Cancellable>>, R: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, S: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, file: &P, save_mode: SaveMode, cancellable: Q, callback: R, user_data: S) {
    //    unsafe { TODO: call ffi::webkit_web_view_save_to_file() }
    //}

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_background_color(&self, rgba: &gdk::RGBA) {
        unsafe {
            ffi::webkit_web_view_set_background_color(self.to_glib_none().0, rgba.to_glib_none().0);
        }
    }

    fn set_custom_charset<'a, P: Into<Option<&'a str>>>(&self, charset: P) {
        let charset = charset.into();
        let charset = charset.to_glib_none();
        unsafe {
            ffi::webkit_web_view_set_custom_charset(self.to_glib_none().0, charset.0);
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn set_editable(&self, editable: bool) {
        unsafe {
            ffi::webkit_web_view_set_editable(self.to_glib_none().0, editable.to_glib());
        }
    }

    fn set_settings(&self, settings: &Settings) {
        unsafe {
            ffi::webkit_web_view_set_settings(self.to_glib_none().0, settings.to_glib_none().0);
        }
    }

    fn set_zoom_level(&self, zoom_level: f64) {
        unsafe {
            ffi::webkit_web_view_set_zoom_level(self.to_glib_none().0, zoom_level);
        }
    }

    fn stop_loading(&self) {
        unsafe {
            ffi::webkit_web_view_stop_loading(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_12", feature = "dox"))]
    fn try_close(&self) {
        unsafe {
            ffi::webkit_web_view_try_close(self.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_property_editable(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "editable".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    fn get_property_is_controlled_by_automation(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "is-controlled-by-automation".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_property_is_ephemeral(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "is-ephemeral".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn get_property_is_loading(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "is-loading".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn get_property_is_playing_audio(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "is-playing-audio".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn get_property_web_context(&self) -> Option<WebContext> {
        let mut value = Value::from(None::<&WebContext>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "web-context".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    #[cfg(any(feature = "v2_2", feature = "dox"))]
    fn connect_authenticate<F: Fn(&Self, &AuthenticationRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &AuthenticationRequest) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "authenticate",
                transmute(authenticate_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_close<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "close",
                transmute(close_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_context_menu<F: Fn(&Self, &ContextMenu, &gdk::Event, &HitTestResult) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &ContextMenu, &gdk::Event, &HitTestResult) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "context-menu",
                transmute(context_menu_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_context_menu_dismissed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "context-menu-dismissed",
                transmute(context_menu_dismissed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_create<F: Fn(&Self, &NavigationAction) -> Option<gtk::Widget> + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &NavigationAction) -> Option<gtk::Widget> + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "create",
                transmute(create_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_decide_policy<F: Fn(&Self, &PolicyDecision, PolicyDecisionType) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &PolicyDecision, PolicyDecisionType) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "decide-policy",
                transmute(decide_policy_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_enter_fullscreen<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "enter-fullscreen",
                transmute(enter_fullscreen_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_insecure_content_detected<F: Fn(&Self, InsecureContentEvent) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, InsecureContentEvent) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "insecure-content-detected",
                transmute(insecure_content_detected_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_leave_fullscreen<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "leave-fullscreen",
                transmute(leave_fullscreen_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_load_changed<F: Fn(&Self, LoadEvent) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, LoadEvent) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "load-changed",
                transmute(load_changed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_load_failed<F: Fn(&Self, LoadEvent, &str, &Error) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, LoadEvent, &str, &Error) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "load-failed",
                transmute(load_failed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_load_failed_with_tls_errors<F: Fn(&Self, &str, &gio::TlsCertificate, gio::TlsCertificateFlags) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &str, &gio::TlsCertificate, gio::TlsCertificateFlags) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "load-failed-with-tls-errors",
                transmute(load_failed_with_tls_errors_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_mouse_target_changed<F: Fn(&Self, &HitTestResult, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &HitTestResult, u32) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "mouse-target-changed",
                transmute(mouse_target_changed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_permission_request<F: Fn(&Self, &PermissionRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &PermissionRequest) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "permission-request",
                transmute(permission_request_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_print<F: Fn(&Self, &PrintOperation) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &PrintOperation) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "print",
                transmute(print_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_ready_to_show<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "ready-to-show",
                transmute(ready_to_show_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_resource_load_started<F: Fn(&Self, &WebResource, &URIRequest) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &WebResource, &URIRequest) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "resource-load-started",
                transmute(resource_load_started_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_run_as_modal<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "run-as-modal",
                transmute(run_as_modal_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_run_color_chooser<F: Fn(&Self, &ColorChooserRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &ColorChooserRequest) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "run-color-chooser",
                transmute(run_color_chooser_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_run_file_chooser<F: Fn(&Self, &FileChooserRequest) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &FileChooserRequest) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "run-file-chooser",
                transmute(run_file_chooser_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_script_dialog<F: Fn(&Self, &ScriptDialog) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &ScriptDialog) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "script-dialog",
                transmute(script_dialog_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_show_notification<F: Fn(&Self, &Notification) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &Notification) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "show-notification",
                transmute(show_notification_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    //#[cfg(any(feature = "v2_18", feature = "dox"))]
    //fn connect_show_option_menu<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored menu: WebKit2.OptionMenu
    //}

    fn connect_submit_form<F: Fn(&Self, &FormSubmissionRequest) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &FormSubmissionRequest) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "submit-form",
                transmute(submit_form_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_web_process_crashed<F: Fn(&Self) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "web-process-crashed",
                transmute(web_process_crashed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_property_editable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::editable",
                transmute(notify_editable_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_estimated_load_progress_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::estimated-load-progress",
                transmute(notify_estimated_load_progress_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_favicon_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::favicon",
                transmute(notify_favicon_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_18", feature = "dox"))]
    fn connect_property_is_controlled_by_automation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::is-controlled-by-automation",
                transmute(notify_is_controlled_by_automation_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn connect_property_is_ephemeral_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::is-ephemeral",
                transmute(notify_is_ephemeral_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_is_loading_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::is-loading",
                transmute(notify_is_loading_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_8", feature = "dox"))]
    fn connect_property_is_playing_audio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::is-playing-audio",
                transmute(notify_is_playing_audio_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_4", feature = "dox"))]
    fn connect_property_related_view_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::related-view",
                transmute(notify_related_view_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_property_settings_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::settings",
                transmute(notify_settings_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::title",
                transmute(notify_title_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_uri_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::uri",
                transmute(notify_uri_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(any(feature = "v2_6", feature = "dox"))]
    fn connect_property_user_content_manager_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::user-content-manager",
                transmute(notify_user_content_manager_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_web_context_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::web-context",
                transmute(notify_web_context_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_zoom_level_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::zoom-level",
                transmute(notify_zoom_level_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(any(feature = "v2_2", feature = "dox"))]
unsafe extern "C" fn authenticate_trampoline<P>(this: *mut ffi::WebKitWebView, request: *mut ffi::WebKitAuthenticationRequest, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &AuthenticationRequest) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(request)).to_glib()
}

unsafe extern "C" fn close_trampoline<P>(this: *mut ffi::WebKitWebView, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn context_menu_trampoline<P>(this: *mut ffi::WebKitWebView, context_menu: *mut ffi::WebKitContextMenu, event: *mut gdk_ffi::GdkEvent, hit_test_result: *mut ffi::WebKitHitTestResult, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &ContextMenu, &gdk::Event, &HitTestResult) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(context_menu), &from_glib_none(event), &from_glib_borrow(hit_test_result)).to_glib()
}

unsafe extern "C" fn context_menu_dismissed_trampoline<P>(this: *mut ffi::WebKitWebView, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_6", feature = "dox"))]
unsafe extern "C" fn create_trampoline<P>(this: *mut ffi::WebKitWebView, navigation_action: *mut ffi::WebKitNavigationAction, f: glib_ffi::gpointer) -> *mut gtk_ffi::GtkWidget
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &NavigationAction) -> Option<gtk::Widget> + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(navigation_action)).to_glib_full()
}

unsafe extern "C" fn decide_policy_trampoline<P>(this: *mut ffi::WebKitWebView, decision: *mut ffi::WebKitPolicyDecision, decision_type: ffi::WebKitPolicyDecisionType, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &PolicyDecision, PolicyDecisionType) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(decision), from_glib(decision_type)).to_glib()
}

unsafe extern "C" fn enter_fullscreen_trampoline<P>(this: *mut ffi::WebKitWebView, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked()).to_glib()
}

unsafe extern "C" fn insecure_content_detected_trampoline<P>(this: *mut ffi::WebKitWebView, event: ffi::WebKitInsecureContentEvent, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, InsecureContentEvent) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), from_glib(event))
}

unsafe extern "C" fn leave_fullscreen_trampoline<P>(this: *mut ffi::WebKitWebView, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked()).to_glib()
}

unsafe extern "C" fn load_changed_trampoline<P>(this: *mut ffi::WebKitWebView, load_event: ffi::WebKitLoadEvent, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, LoadEvent) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), from_glib(load_event))
}

unsafe extern "C" fn load_failed_trampoline<P>(this: *mut ffi::WebKitWebView, load_event: ffi::WebKitLoadEvent, failing_uri: *mut libc::c_char, error: *mut glib_ffi::GError, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, LoadEvent, &str, &Error) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), from_glib(load_event), &String::from_glib_none(failing_uri), &from_glib_borrow(error)).to_glib()
}

#[cfg(any(feature = "v2_6", feature = "dox"))]
unsafe extern "C" fn load_failed_with_tls_errors_trampoline<P>(this: *mut ffi::WebKitWebView, failing_uri: *mut libc::c_char, certificate: *mut gio_ffi::GTlsCertificate, errors: gio_ffi::GTlsCertificateFlags, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &str, &gio::TlsCertificate, gio::TlsCertificateFlags) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &String::from_glib_none(failing_uri), &from_glib_borrow(certificate), from_glib(errors)).to_glib()
}

unsafe extern "C" fn mouse_target_changed_trampoline<P>(this: *mut ffi::WebKitWebView, hit_test_result: *mut ffi::WebKitHitTestResult, modifiers: libc::c_uint, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &HitTestResult, u32) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(hit_test_result), modifiers)
}

unsafe extern "C" fn permission_request_trampoline<P>(this: *mut ffi::WebKitWebView, request: *mut ffi::WebKitPermissionRequest, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &PermissionRequest) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(request)).to_glib()
}

unsafe extern "C" fn print_trampoline<P>(this: *mut ffi::WebKitWebView, print_operation: *mut ffi::WebKitPrintOperation, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &PrintOperation) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(print_operation)).to_glib()
}

unsafe extern "C" fn ready_to_show_trampoline<P>(this: *mut ffi::WebKitWebView, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn resource_load_started_trampoline<P>(this: *mut ffi::WebKitWebView, resource: *mut ffi::WebKitWebResource, request: *mut ffi::WebKitURIRequest, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &WebResource, &URIRequest) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(resource), &from_glib_borrow(request))
}

unsafe extern "C" fn run_as_modal_trampoline<P>(this: *mut ffi::WebKitWebView, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_8", feature = "dox"))]
unsafe extern "C" fn run_color_chooser_trampoline<P>(this: *mut ffi::WebKitWebView, request: *mut ffi::WebKitColorChooserRequest, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &ColorChooserRequest) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(request)).to_glib()
}

unsafe extern "C" fn run_file_chooser_trampoline<P>(this: *mut ffi::WebKitWebView, request: *mut ffi::WebKitFileChooserRequest, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &FileChooserRequest) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(request)).to_glib()
}

unsafe extern "C" fn script_dialog_trampoline<P>(this: *mut ffi::WebKitWebView, dialog: *mut ffi::WebKitScriptDialog, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &ScriptDialog) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(dialog)).to_glib()
}

#[cfg(any(feature = "v2_8", feature = "dox"))]
unsafe extern "C" fn show_notification_trampoline<P>(this: *mut ffi::WebKitWebView, notification: *mut ffi::WebKitNotification, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &Notification) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(notification)).to_glib()
}

unsafe extern "C" fn submit_form_trampoline<P>(this: *mut ffi::WebKitWebView, request: *mut ffi::WebKitFormSubmissionRequest, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P, &FormSubmissionRequest) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked(), &from_glib_borrow(request))
}

unsafe extern "C" fn web_process_crashed_trampoline<P>(this: *mut ffi::WebKitWebView, f: glib_ffi::gpointer) -> glib_ffi::gboolean
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) -> bool + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked()).to_glib()
}

#[cfg(any(feature = "v2_8", feature = "dox"))]
unsafe extern "C" fn notify_editable_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_estimated_load_progress_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_favicon_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_18", feature = "dox"))]
unsafe extern "C" fn notify_is_controlled_by_automation_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_16", feature = "dox"))]
unsafe extern "C" fn notify_is_ephemeral_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_is_loading_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_8", feature = "dox"))]
unsafe extern "C" fn notify_is_playing_audio_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_4", feature = "dox"))]
unsafe extern "C" fn notify_related_view_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_6", feature = "dox"))]
unsafe extern "C" fn notify_settings_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_title_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_uri_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

#[cfg(any(feature = "v2_6", feature = "dox"))]
unsafe extern "C" fn notify_user_content_manager_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_web_context_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_zoom_level_trampoline<P>(this: *mut ffi::WebKitWebView, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<WebView> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&WebView::from_glib_borrow(this).downcast_unchecked())
}
