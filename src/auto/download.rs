// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

use Error;
use URIRequest;
use URIResponse;
use WebView;
use ffi;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct Download(Object<ffi::WebKitDownload>);

    match fn {
        get_type => || ffi::webkit_download_get_type(),
    }
}

impl Download {
    pub fn cancel(&self) {
        unsafe {
            ffi::webkit_download_cancel(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_6")]
    pub fn get_allow_overwrite(&self) -> bool {
        unsafe {
            from_glib(ffi::webkit_download_get_allow_overwrite(self.to_glib_none().0))
        }
    }

    pub fn get_destination(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_download_get_destination(self.to_glib_none().0))
        }
    }

    pub fn get_elapsed_time(&self) -> f64 {
        unsafe {
            ffi::webkit_download_get_elapsed_time(self.to_glib_none().0)
        }
    }

    pub fn get_estimated_progress(&self) -> f64 {
        unsafe {
            ffi::webkit_download_get_estimated_progress(self.to_glib_none().0)
        }
    }

    pub fn get_received_data_length(&self) -> u64 {
        unsafe {
            ffi::webkit_download_get_received_data_length(self.to_glib_none().0)
        }
    }

    pub fn get_request(&self) -> Option<URIRequest> {
        unsafe {
            from_glib_none(ffi::webkit_download_get_request(self.to_glib_none().0))
        }
    }

    pub fn get_response(&self) -> Option<URIResponse> {
        unsafe {
            from_glib_none(ffi::webkit_download_get_response(self.to_glib_none().0))
        }
    }

    pub fn get_web_view(&self) -> Option<WebView> {
        unsafe {
            from_glib_none(ffi::webkit_download_get_web_view(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_6")]
    pub fn set_allow_overwrite(&self, allowed: bool) {
        unsafe {
            ffi::webkit_download_set_allow_overwrite(self.to_glib_none().0, allowed.to_glib());
        }
    }

    pub fn set_destination(&self, uri: &str) {
        unsafe {
            ffi::webkit_download_set_destination(self.to_glib_none().0, uri.to_glib_none().0);
        }
    }

    pub fn connect_created_destination<F: Fn(&Download, &str) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Download, &str) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "created-destination",
                transmute(created_destination_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_decide_destination<F: Fn(&Download, &str) -> bool + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Download, &str) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "decide-destination",
                transmute(decide_destination_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_failed<F: Fn(&Download, &Error) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Download, &Error) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "failed",
                transmute(failed_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_finished<F: Fn(&Download) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Download) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "finished",
                transmute(finished_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_received_data<F: Fn(&Download, u64) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Download, u64) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "received-data",
                transmute(received_data_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn created_destination_trampoline(this: *mut ffi::WebKitDownload, destination: *mut libc::c_char, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&Download, &str) + 'static> = transmute(f);
    f(&from_glib_none(this), &String::from_glib_none(destination))
}

unsafe extern "C" fn decide_destination_trampoline(this: *mut ffi::WebKitDownload, suggested_filename: *mut libc::c_char, f: glib_ffi::gpointer) -> glib_ffi::gboolean {
    callback_guard!();
    let f: &Box_<Fn(&Download, &str) -> bool + 'static> = transmute(f);
    f(&from_glib_none(this), &String::from_glib_none(suggested_filename)).to_glib()
}

unsafe extern "C" fn failed_trampoline(this: *mut ffi::WebKitDownload, error: *mut glib_ffi::GError, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&Download, &Error) + 'static> = transmute(f);
    f(&from_glib_none(this), &from_glib_none(error))
}

unsafe extern "C" fn finished_trampoline(this: *mut ffi::WebKitDownload, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&Download) + 'static> = transmute(f);
    f(&from_glib_none(this))
}

unsafe extern "C" fn received_data_trampoline(this: *mut ffi::WebKitDownload, data_length: u64, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&Download, u64) + 'static> = transmute(f);
    f(&from_glib_none(this), data_length)
}
