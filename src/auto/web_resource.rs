// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

use Error;
use URIRequest;
use URIResponse;
use ffi;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct WebResource(Object<ffi::WebKitWebResource>);

    match fn {
        get_type => || ffi::webkit_web_resource_get_type(),
    }
}

impl WebResource {
    //pub fn get_data<'a, 'b, P: Into<Option<&'a /*Ignored*/gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::webkit_web_resource_get_data() }
    //}

    //pub fn get_data_finish<P: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &P) -> Result<(/*Unimplemented*/CArray TypeId { ns_id: 0, id: 3 }, /*Unimplemented*/Fundamental: Size), Error> {
    //    unsafe { TODO: call ffi::webkit_web_resource_get_data_finish() }
    //}

    pub fn get_response(&self) -> Option<URIResponse> {
        unsafe {
            from_glib_none(ffi::webkit_web_resource_get_response(self.to_glib_none().0))
        }
    }

    pub fn get_uri(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_web_resource_get_uri(self.to_glib_none().0))
        }
    }

    pub fn connect_failed<F: Fn(&WebResource, &Error) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebResource, &Error) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "failed",
                transmute(failed_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    //#[cfg(feature = "v2_8")]
    //pub fn connect_failed_with_tls_errors<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    Ignored certificate: Gio.TlsCertificate
    //    Ignored errors: Gio.TlsCertificateFlags
    //}

    pub fn connect_finished<F: Fn(&WebResource) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebResource) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "finished",
                transmute(finished_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_received_data<F: Fn(&WebResource, u64) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebResource, u64) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "received-data",
                transmute(received_data_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_sent_request<F: Fn(&WebResource, &URIRequest, &URIResponse) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&WebResource, &URIRequest, &URIResponse) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "sent-request",
                transmute(sent_request_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn failed_trampoline(this: *mut ffi::WebKitWebResource, error: *mut glib_ffi::GError, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&WebResource, &Error) + 'static> = transmute(f);
    f(&from_glib_none(this), &from_glib_none(error))
}

unsafe extern "C" fn finished_trampoline(this: *mut ffi::WebKitWebResource, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&WebResource) + 'static> = transmute(f);
    f(&from_glib_none(this))
}

unsafe extern "C" fn received_data_trampoline(this: *mut ffi::WebKitWebResource, data_length: u64, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&WebResource, u64) + 'static> = transmute(f);
    f(&from_glib_none(this), data_length)
}

unsafe extern "C" fn sent_request_trampoline(this: *mut ffi::WebKitWebResource, request: *mut ffi::WebKitURIRequest, redirected_response: *mut ffi::WebKitURIResponse, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&WebResource, &URIRequest, &URIResponse) + 'static> = transmute(f);
    f(&from_glib_none(this), &from_glib_none(request), &from_glib_none(redirected_response))
}
