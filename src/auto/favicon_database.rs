// This file was generated by gir (d933f9a) from gir-files (469db10)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct FaviconDatabase(Object<ffi::WebKitFaviconDatabase, ffi::WebKitFaviconDatabaseClass>);

    match fn {
        get_type => || ffi::webkit_favicon_database_get_type(),
    }
}

pub trait FaviconDatabaseExt {
    fn clear(&self);

    //fn get_favicon<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, page_uri: &str, cancellable: P, callback: Q, user_data: R);

    fn get_favicon_uri(&self, page_uri: &str) -> Option<String>;

    fn connect_favicon_changed<F: Fn(&Self, &str, &str) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FaviconDatabase> + IsA<glib::object::Object>> FaviconDatabaseExt for O {
    fn clear(&self) {
        unsafe {
            ffi::webkit_favicon_database_clear(self.to_glib_none().0);
        }
    }

    //fn get_favicon<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>, R: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, page_uri: &str, cancellable: P, callback: Q, user_data: R) {
    //    unsafe { TODO: call ffi::webkit_favicon_database_get_favicon() }
    //}

    fn get_favicon_uri(&self, page_uri: &str) -> Option<String> {
        unsafe {
            from_glib_full(ffi::webkit_favicon_database_get_favicon_uri(self.to_glib_none().0, page_uri.to_glib_none().0))
        }
    }

    fn connect_favicon_changed<F: Fn(&Self, &str, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &str, &str) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "favicon-changed",
                transmute(favicon_changed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn favicon_changed_trampoline<P>(this: *mut ffi::WebKitFaviconDatabase, page_uri: *mut libc::c_char, favicon_uri: *mut libc::c_char, f: glib_ffi::gpointer)
where P: IsA<FaviconDatabase> {
    callback_guard!();
    let f: &&(Fn(&P, &str, &str) + 'static) = transmute(f);
    f(&FaviconDatabase::from_glib_borrow(this).downcast_unchecked(), &String::from_glib_none(page_uri), &String::from_glib_none(favicon_uri))
}
