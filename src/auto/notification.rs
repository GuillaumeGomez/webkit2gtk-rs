// This file was generated by gir (32b0f11) from gir-files (857b8f5)
// DO NOT EDIT

use ffi;
#[cfg(feature = "v2_8")]
use glib::signal::connect;
use glib::translate::*;
#[cfg(feature = "v2_8")]
use glib_ffi;
#[cfg(feature = "v2_8")]
use std::boxed::Box as Box_;
#[cfg(feature = "v2_8")]
use std::mem::transmute;

glib_wrapper! {
    pub struct Notification(Object<ffi::WebKitNotification>);

    match fn {
        get_type => || ffi::webkit_notification_get_type(),
    }
}

impl Notification {
    #[cfg(feature = "v2_12")]
    pub fn clicked(&self) {
        unsafe {
            ffi::webkit_notification_clicked(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_8")]
    pub fn close(&self) {
        unsafe {
            ffi::webkit_notification_close(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v2_8")]
    pub fn get_body(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_notification_get_body(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_8")]
    pub fn get_id(&self) -> u64 {
        unsafe {
            ffi::webkit_notification_get_id(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v2_16")]
    pub fn get_tag(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_notification_get_tag(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_8")]
    pub fn get_title(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::webkit_notification_get_title(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_12")]
    pub fn connect_clicked<F: Fn(&Notification) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Notification) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "clicked",
                transmute(clicked_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(feature = "v2_8")]
    pub fn connect_closed<F: Fn(&Notification) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Notification) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "closed",
                transmute(closed_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(feature = "v2_12")]
unsafe extern "C" fn clicked_trampoline(this: *mut ffi::WebKitNotification, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&Notification) + 'static> = transmute(f);
    f(&from_glib_none(this))
}

#[cfg(feature = "v2_8")]
unsafe extern "C" fn closed_trampoline(this: *mut ffi::WebKitNotification, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&Notification) + 'static> = transmute(f);
    f(&from_glib_none(this))
}
